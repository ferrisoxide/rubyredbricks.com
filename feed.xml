<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-10-13T10:48:00+10:30</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Ruby Pub - Part 2: Franklin</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/10/13/ruby-pub-franklin/"/>
    <id>http://blog.url.com/blog/2015/10/13/ruby-pub-franklin/</id>
    <published>2015-10-13T10:48:00+10:30</published>
    <updated>2015-10-20T22:56:55+10:30</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="ruby-epub-franklin"&gt;Ruby ePub: Franklin&lt;/h1&gt;

&lt;p&gt;&lt;img alt="Franklin Logo" class="image right" src="/images/posts/franklin.png" /&gt;&lt;/p&gt;

&lt;p&gt;For the aspiring Rubyist-cum-writer there are a number of options when it comes to self-publishing online – ranging from Ruby-based publishing platforms like the Michael Hartl-led &lt;a target="_blank" href="https://github.com/softcover/softcover"&gt;Softcover&lt;/a&gt; project, down to hand-crafted solutions (e.g. my own &lt;a target="_blank" href="/blog/2013/05/06/nanoc-novel/"&gt;earlier experiments&lt;/a&gt;). And if you don't need to own the whole pipeline, &lt;a target="_blank" href="https://www.gitbook.com/"&gt;Gitbook&lt;/a&gt; and &lt;a target="_blank" href="https://leanpub.com/"&gt;Leanpub&lt;/a&gt; offer comprehensive toolchains to help get your book out and into the hands of the reading public.&lt;/p&gt;

&lt;p&gt;In fact, there's probably not been a better time to be writing a self-published book than right now. But with all the competition between publishing platforms it's natural that some solutions don't get the attention they deserve and fall by the way side.&lt;/p&gt;

&lt;p&gt;Sadly, this was the case with Bryan Braun's &lt;a target="_blank" href="https://web.archive.org/web/20150915034729/http://bitbooks.cc/"&gt;Bitbooks service&lt;/a&gt; [archived link]. Earlier this year Bryan announced that, as of October 2015, his site would be shutting down. Thankfully &lt;a target="_blank" href="https://github.com/bryanbraun/franklin"&gt;Franklin&lt;/a&gt;, the open-source mechanism for generating content through &lt;strong&gt;Bitbooks&lt;/strong&gt;, remains available and presents a simple and elegant solution for self-publishing authors wanting to get their work online.&lt;/p&gt;

&lt;p&gt;We'll take a quick look at the &lt;strong&gt;Markdown&lt;/strong&gt;-friendly &lt;strong&gt;Franklin&lt;/strong&gt; tool in a moment, but before we do let's hear from Bryan himself - from an interview conducted shortly before his site closed down.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="interview-with-bryan-braun"&gt;Interview with Bryan Braun&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You chose Middleman as the engine for Franklin. What made you pick this static site generator tool over similar tools like &lt;a target="_blank" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; and &lt;a target="_blank" href="http://nanoc.ws/"&gt;nanoc&lt;/a&gt;?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I looked into Jekyll when I was getting started but at the time it relied on front-matter and filename conventions for defining the urls and templates being used. That was a non-starter for me. My goal was that people could just write markdown and the tool would take care of the rest. I didn't want them to have to worry about using a special "Franklin" format, or front-matter convention.&lt;/p&gt;

&lt;p&gt;Eventually I discovered &lt;a target="_blank" href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt;, which was a great fit. It was flexible enough for me to configure all the default behaviors in a config.rb file. Also, it provided interfaces for extensions and project templates, which allowed for a clean way to add customizations and release parts (like Franklin) as open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Are there any publishing success stories from Bitbooks you'd like to share?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I enjoyed seeing the new books people were writing with Bitbooks (like &lt;a target="_blank" href="http://www.kevinlamping.com/hands-on-visual-regression-testing/"&gt;Hands on Visual Regression Testing&lt;/a&gt;, for example). However, my favorite experience was seeing content once locked in PDFs being liberated as HTML, where it could be referenced, linked to, and made available to search engines and screen readers. John Wiegley's &lt;a target="_blank" href="https://jwiegley.github.io/git-from-the-bottom-up/"&gt;"Git From the Bottom Up"&lt;/a&gt;, was a good success story in that regard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What's your motivation for mothballing Bitbooks? And what impact will this have on your existing users?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I saw other organizations beginning to deliver on my vision for Bitbooks, and once I saw that I wasn't going to be able to compete with them, my efforts subsided significantly. Bitbooks was designed to be low maintenance, but I knew that focusing on other things while leaving Bitbooks in limbo wasn't fair to users.&lt;/p&gt;

&lt;p&gt;Also, by splitting my attention, I was doing several things poorly, which is against my principles. Anything worth doing, is worth doing to the best of your ability, and for me that means committing 100%. I couldn't do that for Bitbooks anymore.&lt;/p&gt;

&lt;p&gt;Fortunately, this choice had minimal impact on Bitbooks users. Everybody's books were hosted on Github pages, meaning that nobody lost their content, and all books remained live at their original URLs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What do you hope for the future of Franklin?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope Franklin continues to be the best solution for building ebooks with Middleman. It has several strengths, including a separation of book metadata from content, support for pure markdown documents, and a theme structure that provides full stylistic control. I intend to continue supporting it, and I expect people to find it valuable for years to come.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="franklin---a-quick-peek"&gt;Franklin - A Quick Peek&lt;/h2&gt;

&lt;p&gt;First off, what I really like about Franklin is it's &lt;strong&gt;Middleman&lt;/strong&gt; base. &lt;strong&gt;Franklin&lt;/strong&gt; works as a &lt;strong&gt;Middleman&lt;/strong&gt; template, and takes almost no time to set up. The complete setup instructions are available on &lt;a target="_blank" href="https://github.com/bryanbraun/franklin"&gt;Franklin's Github page&lt;/a&gt;, but a short version is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;gem install middleman
mkdir -p ~/.middleman  # ensure Middleman's template folder exists
git clone git@github.com:bryanbraun/franklin.git ~/.middleman/franklin
middleman init mysite --template=franklin
cd mysite
bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These steps generate a basic &lt;strong&gt;Franklin&lt;/strong&gt; project, including a default &lt;code&gt;index.md&lt;/code&gt; page, several sample pages and a default 404 page. A fairly standard &lt;strong&gt;Middleman&lt;/strong&gt; &lt;code&gt;config.rb&lt;/code&gt; and the &lt;strong&gt;Franklin&lt;/strong&gt;-specific &lt;code&gt;data/book.yml&lt;/code&gt; and &lt;code&gt;data/tree.yml&lt;/code&gt; files will also be created.&lt;/p&gt;

&lt;p&gt;Nothing in the &lt;strong&gt;Franklin&lt;/strong&gt; configuration files will confuse you. Each item in the &lt;code&gt;book.yml&lt;/code&gt; file (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;github_url&lt;/code&gt;, &lt;em&gt;etc&lt;/em&gt;) is straightforward and easy to understand. Similarly, &lt;code&gt;tree.yml&lt;/code&gt; is a simple list of all the sections of your ebook.&lt;/p&gt;

&lt;p class="language-yaml"&gt;&lt;em&gt;Example tree.yml&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
index.md: "/index.md"
section-1.md: "/section-1.md"
section-2.md: "/section-2.md"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a side note, you don't actually have to build the &lt;code&gt;tree.yml&lt;/code&gt; file yourself. As long as you have an &lt;code&gt;index.md&lt;/code&gt; file for the front page of your book – and you order your pages alphabetically (&lt;code&gt;01-page.md&lt;/code&gt;, &lt;code&gt;02-page.md&lt;/code&gt;, &lt;em&gt;etc&lt;/em&gt;) – the sequencing of pages happens automatically.&lt;/p&gt;

&lt;p&gt;All the content is managed in the &lt;a target="_blank" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; format, so if you're coming from a &lt;strong&gt;Jekyll&lt;/strong&gt; or &lt;strong&gt;nanoc&lt;/strong&gt; background you'll find this comfortable. &lt;strong&gt;Franklin&lt;/strong&gt; uses &lt;a target="_blank" href="https://github.com/vmg/redcarpet"&gt;Redcarpet&lt;/a&gt; out of the box, but swapping to &lt;a target="_blank" href="http://kramdown.gettalong.org/"&gt;Kramdown&lt;/a&gt; or a similar formatting mechanism should be a simple matter of changing the Gemfile and rebundling.&lt;/p&gt;

&lt;h2 id="converting-existing-ebooks"&gt;Converting Existing eBooks&lt;/h2&gt;

&lt;p&gt;The &lt;a target="_blank" href="https://github.com/ferrisoxide/tachypomp"&gt;Tachypomp project&lt;/a&gt; is a good test for converting an existing ebook project to &lt;strong&gt;Franklin&lt;/strong&gt;. Based on &lt;strong&gt;nanoc&lt;/strong&gt;, the original &lt;strong&gt;Tachypomp Project&lt;/strong&gt; could produce content in the &lt;a target="_blank" href="http://bakerframework.com/"&gt;Baker Framework&lt;/a&gt;'s hPub format - at the cost of considerable customisation. While this will be missed, being able to quickly set up and build an HTML-base ebook using &lt;strong&gt;Middleman&lt;/strong&gt; and &lt;strong&gt;Franklin&lt;/strong&gt; more than makes up for it.&lt;/p&gt;

&lt;p&gt;Converting any existing Jekyll or nanoc ebook should be relatively straightforward, providing the content is in a fairly standard Markdown format. This was certainly the case for &lt;strong&gt;Tachypomp&lt;/strong&gt;, and only required copying the markdown files from &lt;code&gt;/content&lt;/code&gt; to &lt;code&gt;/source&lt;/code&gt;. &lt;strong&gt;Jekyll&lt;/strong&gt; and &lt;strong&gt;nanoc&lt;/strong&gt; share similar conventions for front-matter contents (the YAML header for each content source file). &lt;strong&gt;Tachypomp&lt;/strong&gt; only uses &lt;code&gt;title&lt;/code&gt; in the front-matter configuration, so no changes were necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tachypomp&lt;/strong&gt; already had an index file, due to the &lt;code&gt;book.json&lt;/code&gt; file required by the Baker Framework – readily converted to  the &lt;strong&gt;Franklin's&lt;/strong&gt; &lt;code&gt;tree.yml&lt;/code&gt; structure.&lt;/p&gt;

&lt;h2 id="themes"&gt;Themes&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Franklin&lt;/strong&gt; comes with three built in themes: &lt;em&gt;Hamilton&lt;/em&gt; - a serif-font style with drop down table of contents; &lt;em&gt;Epsilon&lt;/em&gt; - a more futuristic looking theme with a pop out sidebar navigation; and &lt;em&gt;Glide&lt;/em&gt; - a responsive theme using a clean sans font set.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example theme: Epsilon&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Epsilon Theme" width="60%" src="/images/posts/epsilon-theme.png" /&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Tachypomp&lt;/strong&gt; I opted for the &lt;em&gt;Glide&lt;/em&gt; theme for that nice responsive styling. Changing themes is trivial - just modify the &lt;code&gt;theme:&lt;/code&gt; setting in &lt;code&gt;/data/book.yml&lt;/code&gt; and run &lt;code&gt;middleman build&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="hosting-on-github"&gt;Hosting on Github&lt;/h2&gt;

&lt;p&gt;This is where using &lt;strong&gt;Middleman&lt;/strong&gt; as the basis for &lt;strong&gt;Franklin&lt;/strong&gt; shines. Thanks to the &lt;a target="_blank" href="https://github.com/middleman-contrib/middleman-deploy"&gt;Middleman Deploy&lt;/a&gt; extension, deploying to a remote site only takes a few minutes.&lt;/p&gt;

&lt;p&gt;I'm using &lt;a target="_blank" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; to host &lt;strong&gt;Tachypomp&lt;/strong&gt;. Apart from adding &lt;code&gt;gem 'middleman-deploy', '~&amp;gt; 1.0'&lt;/code&gt; to the &lt;code&gt;Gemfile&lt;/code&gt; the main configuration changes required are settings in the &lt;strong&gt;Middleman&lt;/strong&gt; &lt;code&gt;config.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p class="language-ruby"&gt;&lt;em&gt;Example config.rb settings&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;activate :deploy do |deploy|
  deploy.method = :git
  # remote is optional (default is "origin")
  # run `git remote -v` to see a list of possible remotes
  deploy.remote = "origin"

  # branch is optional (default is "gh-pages")
  # run `git branch -a` to see a list of possible branches
  deploy.branch = "gh-pages"

  # strategy is optional (default is :force_push)
  deploy.strategy = :force_push
  deploy.build_before = true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don't need to worry about creating a &lt;code&gt;gh-pages&lt;/code&gt; branch as &lt;strong&gt;Middleman Deploy&lt;/strong&gt; takes care of this automatically. The only other steps required are to create an CNAME record with your domain provider and point it to your account on Github. For my project the CNAME record for &lt;code&gt;tachypomp.rubyredbricks.com&lt;/code&gt; points to &lt;code&gt;ferrisoxide.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This assumes you are using a subdomain for your book. You can use apex domains, but this will require creating two &lt;code&gt;A&lt;/code&gt; records for your book's site and pointing them to &lt;code&gt;192.30.252.153&lt;/code&gt; and &lt;code&gt;192.30.252.154&lt;/code&gt;. If in doubt, refer to the Github Pages documentation for &lt;a target="_blank" href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/"&gt;setting up custom domains&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One note not related to &lt;strong&gt;Franklin&lt;/strong&gt; but has caught me up before. You will need to add your &lt;code&gt;CNAME&lt;/code&gt; file to the &lt;code&gt;source&lt;/code&gt; folder and commit it. The CNAME file contains a single line - the URI to your book's site (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;tachypomp.rubyredbricks.com&lt;/code&gt;). You need to do this even if you are using A records, and the file still needs to be called &lt;code&gt;CNAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is more an issue with deploying &lt;strong&gt;Middleman&lt;/strong&gt; projects to &lt;strong&gt;Github Pages&lt;/strong&gt;. I have forgotten to do this a couple of times and been puzzled over where my site disappeared to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Middleman Deploy&lt;/strong&gt; provides mechanisms for other deployment models (rsync, FTP, &lt;em&gt;etc&lt;/em&gt;), but given the simplicity of &lt;strong&gt;Github Pages&lt;/strong&gt; (and the cost - free) it seems the best option for managing your ebook's site.&lt;/p&gt;

&lt;p&gt;If you are interested, the &lt;strong&gt;Franklin&lt;/strong&gt;-generated ebook is available at &lt;a target="_blank" href="http://tachypomp.rubyredbricks.com/"&gt;http://tachypomp.rubyredbricks.com/&lt;/a&gt;. It needs some cleaning up, but it's not bad for 10-15 minutues of work.&lt;/p&gt;

&lt;h2 id="final-thoughts"&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Tachypomp&lt;/strong&gt; only contains text, so it's not a complete test of &lt;strong&gt;Franklin's&lt;/strong&gt; features. But given it took less that 15 minutes to go from my older &lt;strong&gt;nanoc&lt;/strong&gt;-based book to a working, online version it's reasonable to assume that more complex texts would not require an order of magnitude more work.&lt;/p&gt;

&lt;p&gt;The ability to leverage existing &lt;strong&gt;Middleman&lt;/strong&gt; extensions is a huge plus.&lt;/p&gt;

&lt;p&gt;All-in-all &lt;strong&gt;Franklin&lt;/strong&gt; (plus Github Pages) is a simple and inexpensive way to develop and deliver your ebook. Being able to deploy to other formats (e.g PDF) and having a way to control access would be good if you are aiming to monetise your book, but if the goal is to "get it out there" &lt;strong&gt;Franklin&lt;/strong&gt; seems a reasonable approach.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>BASIC Games in Ruby - Animals</title>
    <link rel="alternate" href="http://blog.url.com/blog/2015/09/26/basic-games-in-ruby-animals/"/>
    <id>http://blog.url.com/blog/2015/09/26/basic-games-in-ruby-animals/</id>
    <published>2015-09-26T23:30:00+09:30</published>
    <updated>2015-09-30T15:22:39+09:30</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="BASIC Computer Games Ruby Edition" class="image left" src="/images/posts/basic-computer-games-ruby-edition.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB This post is aimed at entry-level coders. It will have limited value or interest to experienced Rubyists.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="introducing-animal"&gt;Introducing "Animal"&lt;/h2&gt;

&lt;p&gt;An &lt;a href="/blog/2013/10/07/basic-games-in-ruby/"&gt;earlier post&lt;/a&gt; on converting the BASIC game Acey Ducey to Ruby garnered some great feedback, including &lt;a target="_blank" href="https://github.com/chris-hanson/basic-computer-games-ruby-edition/blob/master/acey-ducey.rb"&gt;some corrections&lt;/a&gt; as well as inspiring a &lt;a target="_blank" href="https://github.com/gscalzo/HaskellTheHardWay/tree/master/AceyDoucey"&gt;port to Haskell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inspired to continue working through David H. Ahl's &lt;a target="_blank" href="http://www.atariarchives.org/basicgames/index.php"&gt;BASIC Computer Games&lt;/a&gt; book from the 70s, I'm turning my attention to "Animal" – a 20-questions style game where the computer tries to guess the name of an animal you are thinking of:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;Animal
Adapted from a BASIC game from Creative Computing - Morristown, New Jersey.

Play 'Guess the Animal'
Think of an animal and the computer will try and guess it.
Are you thinking of an animal?
N
Are you thinking of an animal?
Y
Does it swim?
Y
Is it a fish
N
The animal you were thinking of was a?
dolphin
Please type a question that would distinguish a fish from a dolphin
Is it a mammal?
For a dolphin the answer would be?
Y
Are you thinking of an animal?
LIST
Animals I know
dolphin
fish
bird
Are you thinking of an animal?
Y
Does it swim?
Y
Is it a mammal?
Y
Is it a dolphin
Y
Why not try another animal?
Are you thinking of an animal?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Animal was quite a popular BASIC game in its day. Along with &lt;a href="https://en.wikipedia.org/wiki/ELIZA"&gt;ELIZA&lt;/a&gt; it's an example of how simple programs can &lt;em&gt;simulate&lt;/em&gt; human-like behaviour - even on the limited computing platforms we had in the 70s and early 80s. It's also not hard to see it as the predecessor for modern web-based games like &lt;a href="http://en.akinator.com/"&gt;Akinator&lt;/a&gt;. Indeed, the accompanying text in Ahl's book suggests that the program could be reworked to cover different knowledge domains - geography, cell structures… even characters from television and movies. Akinator is a bit more sophisticated than "Animal", but the basic idea is the same.&lt;/p&gt;

&lt;p&gt;"Animal" &lt;a target="_blank" href="http://www.atariarchives.org/basicgames/showpage.php?page=4"&gt;(source)&lt;/a&gt; is actually the third program in the David Ahl's "Basic Computer Games". I had intended on progressing through the book in sequence, but I'm skipping "Amazing" &lt;a target="_blank" href="http://www.atariarchives.org/basicgames/showpage.php?page=3"&gt;(source)&lt;/a&gt; as the code seems more convoluted than the mazes it produces. We may come back to that program in due course.&lt;/p&gt;

&lt;p&gt;Apart from the obvious nostalgia value, the main reason for reviewing these old BASIC games is to be able to talk to my kids over the essentials of coding. After working in management for a decade, and having precious little time to sit down and code with them, I've long been concerned they'd pick up bad habits like I did as a young coder. Indeed, when I was interviewed for my first gig post-management I gave "making sure my kids don't end up as PHP hacks" as the chief reason for returning to coding.&lt;/p&gt;

&lt;p&gt;My fears were somewhat realised when it became clear that my kids don't have a strong understanding of object-oriented programming. As such, this post is aimed at an introductory level and covers some of the basics of Ruby programming. It won't have huge value to a seasoned Rubyist, but at a personal level I hope it will remind me of some of the reasons why I love Ruby so much - and why I believe Ruby is an ideal first programming language.&lt;/p&gt;

&lt;h2 id="data-model"&gt;Data Model&lt;/h2&gt;

&lt;p&gt;The original Animal game stores knowledge of animals in a simple array:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-basic"&gt;70 DIM A$(200)
80 FOR I=0 TO 3
90 READ A$(I)
100 NEXT I
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It took me a while to remember what this meant, but in BASIC the &lt;code&gt;READ&lt;/code&gt; command is used to load into memory data that is stored elsewhere in the program - often declared at the end of the rest of the code. In Animal's case, the data is embedded in the second half of the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-basic"&gt;530 DATA "4", "\QDOES IT SWIM\Y2\N3", "\AFISH", "\ABIRD"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upshot of this is we end up with an in-memory data model that looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;A$(0) "4"
A$(1) "\QDOES IT SWIM\Y2\N3"
A$(2) "\AFISH"
A$(3) "\ABIRD"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Already we are seeing some of the limitations of the program. The BASIC version of Animal can only store 199 records - with the first element in the array being used to maintain a count of the questions and animals. This was fine in the days of VIC-20s and the like, but we're not so constrained with today's computing platforms.&lt;/p&gt;

&lt;p&gt;The data model is also rather dense, with the questions and paths to other questions (the &lt;code&gt;\Y2\N3&lt;/code&gt; part of each question) packed into strings that have to be reinterpretted by the program itself.&lt;/p&gt;

&lt;p&gt;Happily we can unpack the BASIC data model into Ruby objects with a clearer and cleaner intent, breaking it into the blocks of code - &lt;em&gt;i.e.&lt;/em&gt; classes - that make sense.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;class Animal
  attr_reader :name

  def initialize(args)
    @name = args[:name]
  end
end

class Question
  attr_reader :text
  attr_accessor :yes_path, :no_path

  def initialize(args)
    @text     = args[:text]
    @yes_path = args[:yes_path]
    @no_path  = args[:no_path]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our &lt;code&gt;Animal&lt;/code&gt; class represents an animal: a bird, frog, baboon, &lt;em&gt;etc&lt;/em&gt;. It is our &lt;em&gt;definition&lt;/em&gt;, as far as the game is concerned, of what an animal should look like. Similarly our &lt;code&gt;Question&lt;/code&gt; class captures the elements of a question: its text and where to take the user next based on a yes/no answer.&lt;/p&gt;

&lt;p&gt;Now we have our new data model we can build the initial state of the program as Ruby objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def starting_position
  @starting_position ||= Question.new(
    text: "Does it swim?",
    yes_path: Animal.new(name: 'fish'),
    no_path:  Animal.new(name: 'bird')
  )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The notion of a 'position' is used throughout the Ruby version, with the variables &lt;code&gt;current_position&lt;/code&gt; and &lt;code&gt;previous_position&lt;/code&gt; used internally to keep a track of where the user is in the tree as they progress through the tree.&lt;/p&gt;

&lt;p&gt;Calling &lt;code&gt;starting_position&lt;/code&gt; generates a tree-like structure representing all the knowledge program holds about animals.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;            Question: Does it swim?
                       /        \
                     /            \
               [yes path]       [no path]
                  /                   \
                /                       \
            Animal: Fish             Animal: Bird
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the user adds more knowledge the tree gradually expands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;            Question: Does it swim?
                       /        \
                     /            \
               [yes path]       [no path]
                  /                   \
                /                       \
        Question: Is it a mammal?    Animal: Bird
               /        \
             /            \
       [yes path]       [no path]
          /                   \
        /                       \
    Animal: Dolphin         Animal: Fish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Side note: I considered drawing this tree as a graphic, but somehow using old-style ASCII just appeals. That old nostalgic feeling again.&lt;/p&gt;

&lt;p&gt;Remininscing on how my friends and I learnt programming as kids, we spent a lot of time &lt;em&gt;reading&lt;/em&gt; code - and our spry little minds could tease out the data structures and flows despite the &lt;code&gt;GOTO&lt;/code&gt; spaghetti. Ahl's book packs in almost 100 example programs and so has little space for explanation of the internals of each. This, coupled with the mechanical activity of typing in each program (there were no downloads back then), meant that we had to get a good idea of the purpose of each line of code and how it related to the rest of the program.&lt;/p&gt;

&lt;p&gt;The original draft of this post went into great detail about classes and objects, how to pass parameters and so forth. Given the value in reading code - it still takes up a large chunk of what I do as a day-to-day coder - I'd encourge my sons and other interested parties to read the code.&lt;/p&gt;

&lt;p&gt;The full source of the Ruby version of Animal is available on &lt;a target="_blank" href="https://github.com/ferrisoxide/basic-computer-games-ruby-edition/blob/master/animal.rb"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="recursing-the-tree"&gt;Recursing the Tree&lt;/h2&gt;

&lt;p&gt;At the start of each run through the game, the user can type the 'LIST' command to retrieve all the animals the program currently knows about.&lt;/p&gt;

&lt;p&gt;When I talked over this part of the program with my eldest, we came up with a variety of ways to list the animals. Initially we considered having a separate array of &lt;code&gt;Animal&lt;/code&gt; objects, but this would have required more code to maintain the list - both in the initial setup and as the game progresses.&lt;/p&gt;

&lt;p&gt;Given that the data we need is already in the tree, we settled on simply 'walking' through it and finding all the animals.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def list_animals
  puts 'Animals I know'
  animals = collect_animals(starting_position, [])
  animals.each do |animal|
    puts animal.name
  end
end

def collect_animals(position, animals)
  if position.is_a?(Animal)
    animals &amp;lt;&amp;lt; position
  else
    animals = collect_animals(position.yes_path, animals)
    animals = collect_animals(position.no_path, animals)
  end
  animals
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;collect_animals&lt;/code&gt; method is a recursive algorithm. In my experience a small number of otherwise good professional coders don't understand recursion very well, and will happily brute force their way through a data structure. Recursion is an important concept in coding and to this end it's probably worth deconstructing how &lt;code&gt;collect_animals&lt;/code&gt; works.&lt;/p&gt;

&lt;p&gt;The method takes a &lt;code&gt;position&lt;/code&gt; - a node in our tree - and a list of animals as an array. The &lt;code&gt;list_animals&lt;/code&gt; method kicks this off by calling &lt;code&gt;collect_animals(starting_position, [])&lt;/code&gt;, passing in the start of our tree and an empty array. This empty array will act as an 'accumulator', filling up with &lt;code&gt;Animal&lt;/code&gt; objects as we find them.&lt;/p&gt;

&lt;p&gt;The first thing we check for in &lt;code&gt;collect_animals&lt;/code&gt; is our end point - finding an Animal object at the end of a branch. It adds the animal to the &lt;code&gt;animals&lt;/code&gt; array and then returns the accumulating array.&lt;/p&gt;

&lt;p&gt;If we don't find an &lt;code&gt;Animal&lt;/code&gt; (&lt;em&gt;i.e.&lt;/em&gt; the &lt;code&gt;position&lt;/code&gt; is a &lt;code&gt;Question&lt;/code&gt;) then we follow each yes or no path, continually calling &lt;code&gt;collect_animals&lt;/code&gt; until it finds terminating &lt;code&gt;Animal&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;All in all, recursing through the tree like this is a more satisfactory solution than maintaining a separate list of &lt;code&gt;Animal&lt;/code&gt; objects. Obviously with a very large tree this could take some time, but it's not an issue at the moment. And in that we have another important lesson for young coders: don't complicate your code solving problems you don't currently have (otherwise known as the &lt;a target="_blank" href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI - You Aint Gonna Need It - principle&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id="protecting-input-using-ruby-blocks"&gt;Protecting Input Using Ruby Blocks&lt;/h2&gt;

&lt;p&gt;The original Animal BASIC code does little to check input and it's very easy to scramble the program by entering in bad data - or even just hitting return. My son and I decided to try and prevent bad data entry as much as possible, trapping empty responses or input that didn't make sense.&lt;/p&gt;

&lt;p&gt;Doing this we found ourselves writing the same sort of code over and over, and I took it as a good moment to talk to him about reusing code via Ruby's blocks.&lt;/p&gt;

&lt;p&gt;Our basic &lt;code&gt;get_input&lt;/code&gt; method takes a &lt;code&gt;prompt&lt;/code&gt; argument as text to present to the user.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def get_input(prompt)
  is_valid = false

  while !is_valid
    puts prompt
    input = gets.chomp
    is_valid = !input.empty?
    is_valid = is_valid &amp;amp;&amp;amp; yield(input) if block_given?
  end

  input
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The method loops around while &lt;code&gt;is_valid&lt;/code&gt; remains false. A blank response from a user (&lt;em&gt;e.g.&lt;/em&gt; hitting the carriage return) will always mark the input as invalid. If a block is passed to the method (tested with &lt;code&gt;if block_given?&lt;/code&gt;) the block will be called to test if the input data is valid (returning a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;get_yn_answer&lt;/code&gt; method, calling the &lt;code&gt;get_input&lt;/code&gt; will loop until the user enters a 'Y' or 'N' (or 'y' / 'n') response to the prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def get_yn_answer(prompt)
  get_input(prompt) do |input|
    input.upcase == 'Y' || input.upcase == 'N'
  end.upcase
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In &lt;code&gt;prompt_to_start&lt;/code&gt; the user can't continue through the program until a 'Y' (or 'y') response has been entered.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def prompt_to_start
  get_input "Are you thinking of an animal?" do |input|
    case input.upcase
    when 'Y' then true
    when 'LIST' then
      list_animals
      false
    else
      false
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;prompt_to_start&lt;/code&gt; also allows the user to request a 'LIST' of existing animals. Arguably calling the &lt;code&gt;list_animals&lt;/code&gt; method potentially creates a side-effect and normally I'd discourage kids from this style of coding. But as the purpose is to manage the flow it's a reasonable compromise here.&lt;/p&gt;

&lt;p&gt;This is quite a limited use of Ruby's block idiom, but the idea was to give my kids a taste of how sections of code can be reused.&lt;/p&gt;

&lt;h2 id="going-forward"&gt;Going Forward&lt;/h2&gt;

&lt;p&gt;The main game code is still quite procedural - it &lt;em&gt;feels&lt;/em&gt; like a BASIC program that's been converted to Ruby, albeit with some minor additions. There are probably things that can be done to make the code more Ruby-like.&lt;/p&gt;

&lt;p&gt;Working on Animal together, my son and I managed to cover blocks, classes, tree structures and recursion. There were probably more informal lessons along the way - in just being able to sit down and talk code with my kids - but that's a reasonable take-away.&lt;/p&gt;

&lt;p&gt;The question now is whether my kids take any of this on and do more coding of their own. They've both expressed a desire to get into software development as a career, but it doesn't feel like they have the same opportunities to learn their craft – to do the 10,000 hours that I did as a kid – with the constant distractions of the internet and games.&lt;/p&gt;

&lt;p&gt;If I had my time again I'd find a way to record more of the conversations we had while coding.&lt;/p&gt;

&lt;p&gt;I plan on taking more time to code with my kids, to talk through design and the sorts of compromises you always have to address even when building small applications.&lt;/p&gt;

&lt;p&gt;As long as they end up doing what they want, what they enjoy… hell, I'd even be happy if they end up coding in PHP.&lt;/p&gt;

&lt;p&gt;Feel free to look over the code for &lt;a target="_blank" href="https://github.com/ferrisoxide/basic-computer-games-ruby-edition"&gt;BASIC Computer Games (Ruby Edition)&lt;/a&gt;, make comments or criticism.&lt;/p&gt;

&lt;p&gt;Any feedback is appreciated. Thanks for reading.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>DigitalOcean - the Good, the Bad and .. well the Good</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/12/14/digitalocean-the-good-the-bad-and-well-the-good/"/>
    <id>http://blog.url.com/blog/2013/12/14/digitalocean-the-good-the-bad-and-well-the-good/</id>
    <published>2013-12-14T10:30:00+10:30</published>
    <updated>2015-09-29T11:13:31+09:30</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Still pleased with DigitalOcean’s offerings, I’ve decided to check out their referral program. Links to DigitalOcean in this post contain an affliate link.&lt;/p&gt;

&lt;p&gt;&lt;img alt="DigitalOcean logo with tick" class="left image" src="/images/posts/digital-ocean-logo-with-tick.png" /&gt;&lt;/p&gt;

&lt;p&gt;Many readers have probably seen the advertising for &lt;a target="_blank" href="http://digitalocean.com?refcode=3c73c2ef6e3b"&gt;DigitalOcean&lt;/a&gt; [NB: affiliate link] around the traps. Their logo appears pretty consistently in my Facebook advertising feed, probably FB clueing in to my general interest in all things webby.&lt;/p&gt;

&lt;p&gt;My kids had been hassling me for a new Minecraft server, mostly to play with different mods and the like. Given their idea of "monetising Minecraft" hasn't paid off (what is it with kids these days - they all want to be e-entrepreneurs), the DigitalOcean offering seemed a reasonably inexpensive way for them to play.&lt;/p&gt;

&lt;p&gt;Super impressed with the speed of set-up with DigitalOcean. We had a server up and running within minutes, and then a little bit of configuration to get the kids &lt;a target="_blank" href="http://www.spigotmc.org/"&gt;Spigot&lt;/a&gt; based server running. All up we probably spent no more than a couple of hours getting things in a reasonable shape.&lt;/p&gt;

&lt;p&gt;The server ran smoothly for a month without any problems, then suddenly the server disappeared, with this message appearing in my inbox:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;Oh no! We've found an issue with your account and issued you a new ticket
that needs to be addressed as soon as possible.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I'm pretty used to VM hosts sending bad news - when they actually have the capacity to detect that something has gone wrong. Not all of them do. Assuming the worst, it looked like DigitalOcean had picked up a fault and were letting me know.&lt;/p&gt;

&lt;p&gt;I logged into their support page to find out what had happened… and that's where the confusion started.&lt;/p&gt;

&lt;!----&gt;

&lt;p&gt;This is the first message I received from the support team:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;Hi,

We're excited to have you as a customer of DigitalOcean, we would
like to verify your account.

Please provide us with the following:

- Your Name
- Location
- Phone Number
- Type of Traffic you will be sending from the server
- 1 or more of the following:
1. Your public twitter handle
2. Your blog
3. Your company or personal website
4. Your public facebook profile

Thanks,
Support
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O..K.. Needing to know my name and phone number I get, but locked out because DigitalOcean don't know my Facebook profile? What the hell?&lt;/p&gt;

&lt;p&gt;After a series of back and forth messages I finally found eked out from the support team what the issue was. Apparently the server the kids had been running Minecraft on had been involved in fraudulent activity. They needed something to reassure them that I was who I said I was. Frustratingly, there was no way I could get back in to see what was going on until I verified who I was and gave them my personal details. After much to-and-fro'ing I relented and gave them the information they were after, thinking "If you want to see what I'm going to write about this, I'm happy to give you a link to my blog."&lt;/p&gt;

&lt;p&gt;Slightly freaking out over what could have possibly happened, I spent the next few hours pouring over every log file I could find.&lt;/p&gt;

&lt;p&gt;Nothing…&lt;/p&gt;

&lt;p&gt;Not a hint…&lt;/p&gt;

&lt;p&gt;Every single access could be accounted for, down to the IP address. Still worried (rootkit? some crazy Minecraft exploit? what?) I got back in touch with DigitalOcean to report on what I'd garnered from the logs - only to receive the &lt;em&gt;best apology&lt;/em&gt; I've seen from a VM provider.&lt;/p&gt;

&lt;p&gt;They screwed up. I won't go into the details, but basically activity that occurred before I'd even been a customer had triggered off their fraud detection system.&lt;/p&gt;

&lt;p&gt;But they apologised. And offered a rather decent credit as compensation. While the money isn't important, and probably didn't compensate me for the time spent on the issue anyway, it was a nice touch.&lt;/p&gt;

&lt;p&gt;Even though I was ready to rage-quit at one stage, I have to give DigitalOcean points for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The VM hosting service DigitalOcean provide is solid and represents decent value for money.&lt;/li&gt;
  &lt;li&gt;Their support team are personable and not dismissive when someone asks technical questions.&lt;/li&gt;
  &lt;li&gt;They proactively look for problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But most importantly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When they make a mistake, they own up and take steps to make sure it doesn't happen again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though they detected a false-positive in my case, I still rate them for looking out for these sorts of issues. I'd rather know the hosting provider I'm using is doing their best to monitor and protect their environment, than just hoping for the best.&lt;/p&gt;

&lt;p&gt;There's a relatively well known provider (that I won't name) who will happily just let your servers die and not bother to inform you. Same provider, when confronted with evidence from the logs that a VM just dropped out without even so much as a kernal panic, responded with "Doesn't mean much to me. I'm not really a Linux person".&lt;/p&gt;

&lt;p&gt;Really? Go find someone who is and solve the problem. Don't throw it back to me as the customer.&lt;/p&gt;

&lt;p&gt;I've had hosting providers force system changes, right in the middle of other important work. I've had conversations with 2nd tier support, after catastrophic infrastructure failure, that revealed magical thinking:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Me]&lt;/em&gt; So what exactly are you doing to move our reboot to the top of the queue?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Support]&lt;/em&gt; I keep clicking on your VM in the list.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Me]&lt;/em&gt; And that changes the priority?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[Support]&lt;/em&gt; I don't know, but it seems to have helped in the past.&lt;/p&gt;

&lt;p&gt;Just to clarify, this is &lt;strong&gt;not&lt;/strong&gt; the kind of dialogue I've had with DigitalOcean.&lt;/p&gt;

&lt;p&gt;With some providers, often when there's a stuff up it becomes an exercise in blame shifting or moving the work back to the customer:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"The issue is with our upstream provider"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"You really should move to our new shiny, shiny infrastructure"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I'll need to get you to log a support ticket before I can help you with that"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I'd never speak to a client like that. And thankfully neither do the staff at Digital Ocean.&lt;/p&gt;

&lt;p&gt;At the end of the day, VM hosting providers are supplying a service to actual, real-life people. Having the technical competence is one thing. But to not acknowledge that someone is hurting is a terrible way to do business. If I want to keep a customer, my job is to make the problem go away - as best as I can.&lt;/p&gt;

&lt;p&gt;I've also had some great experiences. One server, running on &lt;a target="_blank" href="https://www.linode.com/"&gt;Linode&lt;/a&gt; had over a thousand days of uptime before Linode's admins asked me to schedule a reboot because of infrastructure changes. And again, Linode were apologetic that the reboot had to happen, let me know well in advance and actually gave me the power to schedule the downtime so it could fit in with my needs. Total downtime in three years, less than an hour. And I remain a happy customer.&lt;/p&gt;

&lt;p&gt;The VM hosting market is wide and varied, and there's plenty good and bad players in the market. For the low-end of the market (in price and VM size) I'm pretty happy with the quality of the service that DigitalOcean offer. They are a relatively new player, but with their solid technical offering I imagine they are going to be around for a while. Their support may need a little tweaking, but they acknowledge that - and that's the main reason I'm staying.&lt;/p&gt;

&lt;p&gt;In the end, it's all about keeping your customers happy and treating them with respect. So that's a big tick to you &lt;a target="_blank" href="http://digitalocean.com?refcode=3c73c2ef6e3b"&gt;DigitalOcean&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Ruby Pub - Part 1: Toolchains</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/10/09/ruby-pub-part-1-toolchains/"/>
    <id>http://blog.url.com/blog/2013/10/09/ruby-pub-part-1-toolchains/</id>
    <published>2013-10-09T10:30:00+10:30</published>
    <updated>2015-09-28T10:28:39+09:30</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Ruby Pub" class="image left" src="/images/posts/ruby-pub.png" /&gt;&lt;/p&gt;

&lt;p&gt;Part 1 of a series investigating the development of a Ruby-based e-Publishing system.&lt;/p&gt;

&lt;p&gt;Before progressing too far in building a toolchain for publishing e-books, I want to have a look at the current state of the art - just to see what's out there and check that I'm not re-inventing the wheel.&lt;/p&gt;

&lt;!----&gt;

&lt;p&gt;A surprising number of successful authors already use Ruby to drive their e-publishing toolchains. This post looks at a two of these systems: &lt;a target="_blank" href="https://github.com/fnando/kitabu"&gt;Kitabu&lt;/a&gt; and &lt;a target="_blank" href="https://github.com/blueheadpublishing/bookshop"&gt;Bookshop&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="kitabu"&gt;Kitabu&lt;/h2&gt;

&lt;p&gt;Jesse Storimer uses Kitabu in the production of his &lt;a target="_blank" href="http://www.jstorimer.com/pages/books"&gt;series of books&lt;/a&gt; on working with low-level Unix sockets, TCP/IP and threads. He gives a more detailed explanation of how he uses Kitabu &lt;a target="_blank" href="http://www.jstorimer.com/blogs/workingwithcode/7766061-my-ebook-publishing-process"&gt;on his blog&lt;/a&gt; than I will go into here.&lt;/p&gt;

&lt;h3 id="installing-kitabu"&gt;Installing Kitabu&lt;/h3&gt;

&lt;p&gt;Installing &lt;a target="_blank" href="https://github.com/fnando/kitabu"&gt;Kitabu&lt;/a&gt; is slightly complicated, due to its dependency (via the eeepub gem) on RubyZip. RubyZip's interface changed in version 1.0, so to be able to install Kitabu we have to make use of an earlier version of the gem.&lt;/p&gt;

&lt;p&gt;To install Kitabu:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;gem install rubyzip -v 0.9.9
gem install kitabu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a side note, this also affects the &lt;a target="_blank" href="https://github.com/ferrisoxide/tachypomp"&gt;Tachypomp&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Once installed Kitabu has some nice features. Executing &lt;code&gt;kitabu check&lt;/code&gt; from the command line produces the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;Prince XML: Converts HTML files into PDF files.
Not installed.

KindleGen: Converts ePub e-books into .mobi files.
Not installed.

html2text: Converts HTML documents into plain text.
Not installed.

pygments.rb: A generic syntax highlight. If installed, replaces CodeRay.
Not installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the output suggests, Kitabu is capable of producing e-books in a variety of formats, including HTML, Kindle .mobi, PDF and text. PDF generation requires &lt;a target="_blank" href="http://www.princexml.com/"&gt;Prince XML&lt;/a&gt;, a commercial tool for building high-quality documents. At $495 USD for a single user licence, Prince isn't an inexpensive solution, but it does produce exceptional PDF documents. If your goal is to produce print-ready PDFs then investing in Prince shouldn't be too onerous.&lt;/p&gt;

&lt;p&gt;It would be nice if Kitabu could default to an open-source PDF generator (&lt;em&gt;e.g.&lt;/em&gt; Prawn) in the absence of Prince, but pretty much all PDF generating gems have their own interfaces and it'd be a lot of work to maintain support for both.&lt;/p&gt;

&lt;h3 id="working-with-kitabu"&gt;Working with Kitabu&lt;/h3&gt;

&lt;p&gt;Kitabu works with Markdown, Textile or HTML formatted files. All the contents are maintained in the &lt;code&gt;/text&lt;/code&gt; folder, indexed by the convention of adding a sequence number at the start of each filename (&lt;em&gt;e.g&lt;/em&gt; &lt;code&gt;01_first_chapter.markdown&lt;/code&gt;, &lt;code&gt;02_second_chapter.markdown&lt;/code&gt;, …). It's also possible to nest sections within chapters.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;kitabu new my_book_title&lt;/code&gt; creates boilerplate layouts, templates, etc in the created &lt;code&gt;my_book_title&lt;/code&gt; directory. There are various config files available to tweak, but that's beyond the scope of this post.&lt;/p&gt;

&lt;p&gt;Kitabu's implementation of syntax highlighting is quite novel. Inline styling is supported by either CodeRay or Pygments, but Kitabu also allows you to declare references to code source files:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;@@@ ruby code/example-1.rb @@@

In this example...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are working on a technical book this would probably prove handy, in that you can keep all your source code examples separate from the main text.&lt;/p&gt;

&lt;p&gt;Another nice feature is &lt;code&gt;kitabu stats&lt;/code&gt;. Running this command against the Tachypomp contents (ported to Kitabu) produced the following report:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;Chapters: 8
Words: 34155
Images: 0
Links: 2
Footnotes: 0
Code blocks: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you're wanting to keep tabs on your progress, I can see this being a handy feature.&lt;/p&gt;

&lt;p&gt;Kitabu uses Sass under the hood to manage CSS. The ePub and HTML stylesheets are kept separate from each other in the &lt;code&gt;/templates&lt;/code&gt; folder, allowing different styling for different representations of the content. This is a must, given ePub 2's limited support for CSS.&lt;/p&gt;

&lt;p&gt;Kitabu has some built-in commands for generating content. For instance, the &amp;lt;%= toc %&amp;gt; will build a table of contents wherever declared. It may very well be possible to generate other common content using &lt;code&gt;erb&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exporting-content"&gt;Exporting Content&lt;/h3&gt;

&lt;p&gt;Running &lt;code&gt;kitabu export&lt;/code&gt; will build HTML and ePub versions of your content by default, and PDF and .mobi versions if you have the right gems installed. The output is a little terse (&lt;code&gt;** e-book has been exported&lt;/code&gt;), but the content is generated cleanly in your book project's &lt;code&gt;/output&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;I'm not sure if I did something wrong, but running Tachypomp through Kitabu generated an ePub document with a garbled front page. Looking through the unzipped ePub file doesn't reveal anything, so I suspect this is an issue with Calibre not rendering .png files properly.&lt;/p&gt;

&lt;p&gt;The generated HTML ends up being in a single page. While useful for debugging, I wouldn't want people to have to download an entire novel in one hit. Not sure if there's any way to change Kitabu's behaviour, but it doesn't seem likely. There's also no built-in mechanism for deploy HTML to a server, though writing a simple &lt;code&gt;rake&lt;/code&gt; task wouldn't be too difficult.&lt;/p&gt;

&lt;p&gt;Though I didn't install Prince or .mobi support, the &lt;a target="_blank" href="https://github.com/fnando/kitabu#samples"&gt;sample documents&lt;/a&gt; do show off its competent PDF generation capabilities.&lt;/p&gt;

&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;

&lt;p&gt;The framework isn't as extensible as either nanoc or Jekyll, but it's a purpose-built tool that does one thing well. Kitabu would be ideal as the main components of a publishing pipeline targeting off-line reading system like the Kindle or PDFs.&lt;/p&gt;

&lt;p&gt;The inflexibility in managing HTML content, and the lack of nanoc-style filters to refine the generation of content, would drive me away from adopting Kitabu, but it's a nice and simple pipeline for producing e-books out of the box without having to write any custom code. Compared to &lt;code&gt;nanoc&lt;/code&gt;, which requires a reasonable amount of configuration (e.g. the Rules file, custom commands) to get it to produce e-books, Kitabu assumes a sensible default model for e-book content.&lt;/p&gt;

&lt;p&gt;In particular I like the &lt;code&gt;kitabu stats&lt;/code&gt; command and would probably consider writing something similar as an extension to nanoc.&lt;/p&gt;

&lt;h2 id="bookshop"&gt;Bookshop&lt;/h2&gt;

&lt;p&gt;Pat Shaughnessy wrote his &lt;a target="_blank" href="http://patshaughnessy.net/ruby-under-a-microscope"&gt;Ruby Under the Microscope&lt;/a&gt; using the &lt;a target="_blank" href="https://github.com/blueheadpublishing/bookshop"&gt;Bookshop&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;As for Jesse Storimer, Pat does a &lt;a target="_blank" href="http://patshaughnessy.net/2012/11/27/my-ebook-build-process-and-some-pdf-epub-and-mobi-tips"&gt;much better job than I&lt;/a&gt; going through the ins and outs of using Bookshop. I will, however, endeavour to give it my best shot.&lt;/p&gt;

&lt;h3 id="installing-bookshop"&gt;Installing Bookshop&lt;/h3&gt;

&lt;p&gt;Keeping the gem environment clean, so I don't pollute the common setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;rvm use 1.9.3
rvm gemset use bookshop --create
gem install bookshop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I actually did something similar with Kitabu - I just neglected to mention it. Bookshop really seems to need &lt;a target="_blank" href="http://www.princexml.com/"&gt;PrinceXML&lt;/a&gt; installed before being able to do anything reasonable. On the Mac this is fairly straight forward. After downloading the &lt;a target="_blank" href="http://www.princexml.com/download/"&gt;PrinceXML package&lt;/a&gt; it's just a matter of unpacking the archive and running &lt;code&gt;/.install.sh&lt;/code&gt;. Flawless. It doesn't matter if you install this before or after installing the Bookshop gem.&lt;/p&gt;

&lt;p&gt;Bookshop required Java 1.5 or better installed, presumably to run &lt;a target="_blank" href="https://code.google.com/p/epubcheck/"&gt;epubcheck&lt;/a&gt; - a tool for validating ePub files.&lt;/p&gt;

&lt;h3 id="using-bookshop"&gt;Using Bookshop&lt;/h3&gt;

&lt;p&gt;Building a basic outline for an e-book is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;bookshop new my_new_book
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bookshop is a much bigger beastie than Kitabu. The generated scaffolding is quite extensive, with a clean separation of content into &lt;code&gt;/frontmatter&lt;/code&gt;, &lt;code&gt;/bodymatter&lt;/code&gt; and &lt;code&gt;/backmatter&lt;/code&gt; folders.&lt;/p&gt;

&lt;p&gt;Bookshop uses HTML5 as the basis for generating content in different formats, not Markdownm and makes extensive use of &lt;code&gt;erb&lt;/code&gt; to prepare the e-book text. It can also vary the generated content depending on the target format:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;&amp;lt;% if @output == (:pdf or :html) %&amp;gt;
  &amp;lt;%= import('frontmatter/cover.html.erb')%&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While not as versatile as nanoc's representations, it certainly allows for variations in content between delivery formats. The &lt;code&gt;import&lt;/code&gt; method is also interesting - you can organise your book in whatever files and folders suits you and pull the content in where appropriate. Because it's all &lt;code&gt;erb&lt;/code&gt;-driven I imagine this would lend itself to reusing common content (&lt;em&gt;e.g.&lt;/em&gt; copyright notices) or even a Rails-style templating system at a pinch. This is in contrast to the way I prefer to work, where a single source file is broken down using my &lt;a target="_blank" href="https://github.com/ferrisoxide/breakdown"&gt;Breakdown gem&lt;/a&gt;. But I can see this working for what is probably a more typical writing workflow.&lt;/p&gt;

&lt;p&gt;Defining the table of contents is a little irksome. You have to build &lt;code&gt;toc.ncx.erb&lt;/code&gt; (for ePub / .mobi) and &lt;code&gt;toc.html.erb&lt;/code&gt; (for HTML5 / PDF) separately by hand. It would be nice to have a single metadata file - say a &lt;code&gt;contents.yml&lt;/code&gt; - that defines the table of contents in the one place, and generate the required artefacts automatically.&lt;/p&gt;

&lt;h3 id="exporting-content-1"&gt;Exporting Content&lt;/h3&gt;

&lt;p&gt;Running &lt;code&gt;bookshop build&lt;/code&gt; gives a list of available formats and the location of build artefacts:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;$ bookshop build

Usage: bookshop build [ARGS]

The most common build commands are:
 pdf          Builds a new pdf  at /builds/pdf/book.pdf
 html         Builds a new html at /builds/html/book.html
 epub         Builds a new epub at /builds/epub/book.epub
 mobi         Builds a new mobi at /builds/mobi/book.mobi
 all          Builds all formats above

All commands can be run with -h for more information.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with Kitabu, the generated HTML ends up in a single file. Not particularly useful (at least to me), but the focus is very much on building content for offline delivery. Generating content in ePub format produces the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;$ bookshop build epub

Deleting any old builds
rm -r
cp -r book/epub/META-INF builds/epub/
cp -r book/epub/mimetype builds/epub/
Generating new html from erb
Generating new cover.html from erb
Generating new toc.html from erb
Generating new content.opf from erb
Generating new toc.ncx from erb
cp -r book/assets builds/epub/OEBPS/assets/
Zipping up into epub
  adding: mimetype (stored 0%)
  adding: META-INF/container.xml (deflated 32%)
  adding: OEBPS/assets/css/page-template.xpgt (deflated 78%)
  adding: OEBPS/assets/css/stylesheet.epub.css (deflated 65%)
  adding: OEBPS/images/canvas.jpg (deflated 0%)
  adding: OEBPS/images/cover.png (deflated 0%)
  adding: OEBPS/images/draft.png (deflated 6%)
  adding: OEBPS/images/html-18.png (deflated 2%)
  adding: OEBPS/book.html (deflated 59%)
  adding: OEBPS/content.opf (deflated 60%)
  adding: OEBPS/cover.html (deflated 34%)
  adding: OEBPS/toc.html (deflated 61%)
  adding: OEBPS/toc.ncx (deflated 70%)
Validating with epubcheck
Epubcheck Version 1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It interesting to note the &lt;code&gt;Validating with epubcheck&lt;/code&gt; output. One nice feature of Bookshop is that it makes sure the generated content is valid ePub, something that Kitabu (and my own Tachypomp for that matter) trusts the eeepub gem to do for you. As it happens, I didn't suffer the same sort of weirdness generating ePub content that I did in Kitabu. Both systems created an image as part of the front page, with the Kitabu-generated front page seeming to scramble in Calibre. I didn't have any similar problems with Bookshop.&lt;/p&gt;

&lt;p&gt;All the zipping is done with the Unix &lt;code&gt;zip&lt;/code&gt; command. On Windows it's assumed that a &lt;code&gt;zip.exe&lt;/code&gt; is available on the path. Bookshop doesn't use eeepub or any other gems for generating ePub 2 content. While there is more internal code to generate the ePub book, there's no reliance on third party gems like RubyZip.&lt;/p&gt;

&lt;p&gt;Building a PDF file generates clean, print-ready documents - though it does require a commercial licence from Prince.&lt;/p&gt;

&lt;p&gt;I didn't try creating a Kindle .mobi file, but as this just pipes the ePub contents through &lt;a target="_blank" href="http://www.amazon.com/gp/feature.html?ie=UTF8&amp;amp;docId=1000765211"&gt;Amazon's Kindlegem&lt;/a&gt; executable I don't imagine there would be any real problems. I don't have a Kindle to test against, so I'm going to assume this just works.&lt;/p&gt;

&lt;h3 id="summary-1"&gt;Summary&lt;/h3&gt;

&lt;p&gt;One major downside of Bookshop is that it is entirely driven by HTML5 - there doesn't seem to be any simple way to introduce Markdown or other alternative markup languages into the mix. There's also no mechanism to add additional formats (&lt;em&gt;e.g.&lt;/em&gt; HPub). Having said that, the code is clean and easier to understand - it wouldn't take a massive effort to add either (hint: have a look at &lt;code&gt;/lib/bookshop/commands/build.rb&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I really like the epubcheck integration. Knowing the generated content matches the ePub specification creates peace of mind. As a basic QA check I can't see any reason not to integrate this into a nanoc-based system.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;While both Kitabu and Bookshop do an admirable job of producing e-books in a variety of formats, I can't say I'm compelled to walk away from nanoc. The limited options for generating HTML content are probably fine in general, but doesn't support the online / offline publishing model I'm pursuing.&lt;/p&gt;

&lt;p&gt;There's nothing either can do that can't be replicated in nanoc and - while it may require additional coding - I'd prefer the flexibility of a general purpose tool. There are a lot of good ideas in both systems examined, and I undoubtedly look to stealing some of these for my own system.&lt;/p&gt;

&lt;p&gt;In short, I expect the majority of authors looking to produce content for offline readers would do well to look at either Kitabu (if your preference is for writing in Markdown) or Bookshop (for HTML based content).&lt;/p&gt;

&lt;p&gt;In follow up posts I'll be looking at commercial e-publishing systems, examining how Ruby can be used to build an open source e-publishing system that takes written content all the way through to delivery, promotion and selling. And naturally enough I intend getting round to actually coding my own platform, building on what I've seen in Kitabu and Bookshop - and lessons learned from the &lt;a href="/blog/2013/10/02/ruby-and-hpub/"&gt;Tachypomp&lt;/a&gt; project.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>BASIC Games in Ruby - Acey Ducey</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/10/07/basic-games-in-ruby/"/>
    <id>http://blog.url.com/blog/2013/10/07/basic-games-in-ruby/</id>
    <published>2013-10-07T10:30:00+10:30</published>
    <updated>2015-09-30T09:05:25+09:30</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="BASIC Computer Games Ruby Edition" class="image right" src="/images/posts/basic-computer-games-ruby-edition.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOSTALGIA WARNING!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Recently I rediscovered my copy of &lt;a href="http://www.atariarchives.org/basicgames/index.php"&gt;BASIC Computer Games - Microcomputer Edition&lt;/a&gt;, sitting on my oldest son's bookshelf.&lt;/p&gt;

&lt;!----&gt;

&lt;p&gt;Finding this battered old tome evoked many happy memories; typing reams of ALL-CAPS code into the brand-spanking new &lt;a href="http://en.wikipedia.org/wiki/Micromation"&gt;Micromation&lt;/a&gt;, an &lt;a href="http://en.wikipedia.org/wiki/MP/M"&gt;MP/M&lt;/a&gt; machine my school purchased through a long-running fundraising campaign. This was before I got my hands on a VIC-20, a machine that booted directly into a &lt;a href="http://en.wikipedia.org/wiki/Commodore_BASIC"&gt;Commodore BASIC&lt;/a&gt; shell, and lost whole Summer holidays to simple, joyful coding.&lt;/p&gt;

&lt;p&gt;BASIC was a big part of growing up with computers for my crowd. Looking back now, it was a terrible first language to learn, and I wonder how much further I would be now if I'd had something like Ruby available to me when I was a kid. With a hint of nostalgia, I decided to sit down with my son and see what a Ruby version of a BASIC Computer Game might look like - if we ported one of these old games to a new language.&lt;/p&gt;

&lt;h2 id="always-something-there-to-remind-me"&gt;Always Something There to Remind Me&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/David_H._Ahl"&gt;David Ahl's&lt;/a&gt; collection of BASIC Computer Games has a bit of history. Originally intended as an educational tool, it came illustrated with &lt;a href="http://www.bekerbots.com/"&gt;George Becker's&lt;/a&gt; wonderful &lt;a href="http://blastprocessing.blogspot.com.au/2009/04/robots-of-george-beker.html"&gt;"Beker Bots"&lt;/a&gt;, suggestive of a magical, robotised world beyond the code laid bare in Ahl's book.&lt;/p&gt;

&lt;p&gt;My own copy has travelled with me, from job to job, from city to city. It was borrowed from Greg S. - a childhood friend with more access to ready-funds than I did, who kept me supplied with books and copies of &lt;a href="http://en.wikipedia.org/wiki/Your_Computer_(Australian_magazine)"&gt;Your Computer (Australia)&lt;/a&gt; and inadvertently financed my early eduction in computing. Sadly, I lost contact with Greg over the years and never got to return his book. So it has stayed with me, a pointer to an old place in memory.&lt;/p&gt;

&lt;h2 id="terrible-terrible-code"&gt;Terrible, Terrible Code&lt;/h2&gt;

&lt;p&gt;One thing that stood out re-reading old BASIC code is just how absolutely horrible the language was. &lt;a href="http://en.wikipedia.org/wiki/BASIC"&gt;BASIC&lt;/a&gt; - or Beginner's All-purpose Symbolic Instruction Language for the kids who have never seen it without the 'Visual' prefix - was probably the first programming language for old coders like myself who grew up in the 80s.&lt;/p&gt;

&lt;p&gt;BASIC taught me the (ahem) basics of variable assignment, looping and conditional statements. It also taught me how to write sloppy, unstructured code.&lt;/p&gt;

&lt;p&gt;Unfortunately many of the games collected in Ahl's book reflect some of these bad programming practices, reinforcing &lt;a href="http://en.wikipedia.org/wiki/Edsger_Dijkstra"&gt;Edsger Dijkstra's&lt;/a&gt; famous claim that the &lt;a href="http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html"&gt;Go To Statement (should be) Considered Harmful&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="but-what-if-my-first-language-was-ruby"&gt;But What If My First Language Was Ruby?&lt;/h2&gt;

&lt;p&gt;I'm slightly envious of my kids growing up with a plethora of really decent computer languages available to them. My oldest knows a little Ruby and my youngest is a keen &lt;a href="http://scratch.mit.edu/"&gt;Scratch&lt;/a&gt; programmer. With that in mind I had some trepidation in exposing them to the world of BASIC. Much like showing someone how to rub two sticks together so they can appreciate matches, I sat down with my 13-year old to take apart an old BASIC game - and put it back together in Ruby.&lt;/p&gt;

&lt;p&gt;I was surprised how much I remembered BASIC - and how easy it was to explain things to my son ("&lt;code&gt;print&lt;/code&gt; is just like &lt;code&gt;puts&lt;/code&gt;"). BASIC's accessibility is really central to its charm. We started with the first game in the book: &lt;a href="http://www.atariarchives.org/basicgames/showpage.php?page=2"&gt;Acey Ducey&lt;/a&gt;, a simulation of a simple card game where two cards are drawn and the player bets on whether or not the next card will fall between the two.&lt;/p&gt;

&lt;p&gt;You can draw you own conclusion on the &lt;a href="http://www.atariarchives.org/basicgames/showpage.php?page=2"&gt;original source code&lt;/a&gt;. Delving into the mechanism, we came across a curious algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-basic"&gt;260 PRINT"HERE ARE YOUR NEXT TWO CARDS"
270 A=INT(14*RND(1))+2
280 IF A&amp;lt;2 THEN 270
290 IF A&amp;gt;14 THEN 270
300 B=INT(14*RND(1))+2
310 IF B&amp;lt;2 THEN 300
320 IF B&amp;gt;14 THEN 300
330 IF A&amp;gt;=B THEN 270
350 IF A&amp;lt;11 THEN 400
360 IF A=11 THEN 420
370 IF A=12 THEN 440
380 IF A=13 THEN 460
390 IF A=14 THEN 480
400 PRINT A
410 GOTO 500
420 PRINT "JACK"
430 GOTO 500
440 PRINT "QUEEN"
450 GOTO 500
460 PRINT "KING"
470 GOTO 500
480 PRINT "ACE"
500 IF B&amp;lt;11 THEN 550
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So…lines 270 to 300 basically loop until the condition of "two cards, with the first being smaller than the first" occurs. "That's just silly," declared my son, "You already know what the first card is. Why can't you pick the second one going from that?" Why indeed. Ah.. kids. Here's our effort:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;puts "Here are your next two cards:"
card_a = rand(12) + 2
card_b = rand(14 - card_a) + card_a + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;PRINT "JACK"&lt;/code&gt;, &lt;code&gt;PRINT "QUEEN"&lt;/code&gt; pattern is repeated throughout the game, wherever there is a need to convert the number representing a card to a string. This is slightly unforgivable, as even BASIC had the concept of subroutines (the delightfully named &lt;code&gt;GOSUB&lt;/code&gt;). A rough equivalent in Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;def card_to_s(index)
  if index &amp;lt; 11
    return index.to_s
  elsif index == 11
    return "Jack"
  elsif index == 12
    return "Queen"
  elsif index == 13
    return "King"
  elsif index == 14
    return "Ace"
  end
end

puts card_to_s(card_a)
puts card_to_s(card_b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even that is a little verbose. It could rewritten without becoming too obscure using Ruby's &lt;code&gt;each_with_object&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;cards = (2..10).each_with_object({}) { |num, hash| hash[num] = num.to_s }
cards.merge!(11 =&amp;gt; 'Jack', 12 =&amp;gt; 'Queen', 13 =&amp;gt; 'King', 14 =&amp;gt; 'Ace')

puts cards[card_a]
puts cards[card_b]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My lad and I pursued the port with some simple rules: (a) No comments, (b) No specs. Just like the good old days.&lt;/p&gt;

&lt;p&gt;The source code can be found on &lt;a href="https://github.com/ferrisoxide/basic-computer-games-ruby-edition"&gt;Github&lt;/a&gt;. There's nothing particular special about the &lt;code&gt;acey-ducey.rb&lt;/code&gt; code, but it is shorter than the BASIC version by about 40%. It's also - in my opinion - orders of magnitude more readable. Here's a snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;while money &amp;gt; 0 do

  puts "You have #{money} dollars."

  puts "Here are your next two cards:"

  card_a = rand(12) + 2
  card_b = rand(14 - card_a) + card_a + 1

  puts card_to_s(card_a)
  puts card_to_s(card_b)

  valid_bet = false

  while valid_bet == false do
    puts "What is your bet?"
    bet = gets.chomp.to_i
    if bet == 0
      puts "Chicken!!"
      valid_bet = true
    elsif bet &amp;gt; money
      puts "Sorry, my friend but you have bet to much."
      puts "You have only #{money} dollars to bet."
    elsif
      valid_bet = true
    end
  end
  ...
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output is reasonably faithful to the original:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-text"&gt;Acey Ducey is played in the following manner:
The dealer (computer) deals two cards face up
You have an option to bet or not to bet depending
on whether or not you feel the card will have
a value between the first two.
If you do not want to bet, input a 0.
You have 100 dollars.
Here are your next two cards:
8
Queen
What is your bet?
10
The card was 10.
You win!!!
You have 110 dollars.
Here are your next two cards:
6
7
What is your bet?
0
Chicken!!
You have 110 dollars.
Here are your next two cards:
Queen
King
What is your bet?
0
Chicken!!
You have 110 dollars.
Here are your next two cards:
3
Queen
What is your bet?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exciting, eh? No wonder we needed all those pictures of Beker's robots to keep us going.&lt;/p&gt;

&lt;h2 id="what-did-i-get-out-of-this"&gt;What Did I Get Out of This?&lt;/h2&gt;

&lt;p&gt;Well.. not much. As much as BASIC gave me my entry into programming I'd never want to go back there again. My son and I planned on working our way through the rest of the book but I was so turned off by the next game (&lt;a href="http://www.atariarchives.org/basicgames/showpage.php?page=3"&gt;Amazing&lt;/a&gt;, a nest of &lt;code&gt;GOTO&lt;/code&gt;s that's harder to traverse than the mazes it generates) it felt better for everyone's state of mind to just walk away. We may come back to it again at some stage as there is some absolute gold in Ahl's book.  &lt;a href="http://www.atariarchives.org/basicgames/showpage.php?page=4"&gt;Animal&lt;/a&gt;, written well, would be a great intro into binary searches. &lt;a href="http://www.atariarchives.org/basicgames/showpage.php?page=124"&gt;Orbit&lt;/a&gt; deals with with &lt;a href="http://en.wikipedia.org/wiki/Law_of_cosines"&gt;The Law of Cosines&lt;/a&gt; and other fun maths. And &lt;a href="http://www.atariarchives.org/basicgames/showpage.php?page=157"&gt;Super Star Trek&lt;/a&gt; is an absolute gem.&lt;/p&gt;

&lt;p&gt;To see these old classics recreated in a modern language I'd be willing to put some more time into revisiting the worlds of BASIC. If only it wasn't for all those goddamed &lt;code&gt;GOTO&lt;/code&gt;s. But there's only so much time available, and I'd rather be coding new stuff with my kids than indulging in my own nostalgic kick-back.&lt;/p&gt;

&lt;p&gt;It's time to let go. So Greg, if you want your book back.. just let me know.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Your Kids Are Being Trolled On Minecraft</title>
    <link rel="alternate" href="http://blog.url.com/blog/2013/10/06/your-kids-are-being-trolled-on-minecraft/"/>
    <id>http://blog.url.com/blog/2013/10/06/your-kids-are-being-trolled-on-minecraft/</id>
    <published>2013-10-06T10:30:00+10:30</published>
    <updated>2015-09-28T10:28:39+09:30</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="Minecraft Troll" class="image left" src="/images/posts/minecraft-creeper-troll.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Note to parents: your kids are being trolled (and trolling) in Minecraft.&lt;/p&gt;

&lt;!----&gt;

&lt;p&gt;The act of trolling is as old as the internet - probably older. Its intent is to provoke an emotional response by engaging in behaviour likely to upset its target. In the early days of the internet, "trolling" was generally associated with posting inflammatory comments in news groups. More recently, the word is used to describe a wide range of online harassment.&lt;/p&gt;

&lt;p&gt;Arguably there is good trolling and bad trolling, as extolled in The Age's article &lt;a href="http://www.theage.com.au/small-business/finance/blogs/the-big-idea/why-do-people-troll-20131002-2url0.html"&gt;Why People Troll&lt;/a&gt;. Good trolling creates debate, questions our assumptions and makes us think. Bad trolling, as generally evident in Minecraft games, serves no other purpose than to offend and upset its victims - and is nothing short of a cyber-bullying.&lt;/p&gt;

&lt;p&gt;Trolling in Minecraft - or "griefing" as it's known - can take various forms: from beating up players, stealing or damaging their virtual property; or by exploiting bugs in Minecraft and its extensions to interfere with the play of others.&lt;/p&gt;

&lt;p&gt;None of this will be new to regular players of Minecraft. But many parents may be blissfully unaware of what their kids are being subject to (and subjecting other kids to) during the many hours they spend in this virtual world.&lt;/p&gt;

&lt;h2 id="its-a-troll-world-after-all"&gt;It's a Troll World After All&lt;/h2&gt;

&lt;p&gt;There is a slew of YouTube videos demonstrating how to grief other players in Minecraft. Many have titles like &lt;a href="http://www.youtube.com/watch?v=LJmbHgHybKk"&gt;6 year old Trolled on Minecraft&lt;/a&gt; or &lt;a href="http://www.youtube.com/watch?v=fF1aY0I-8-E"&gt;Trolling an angry kid on Minecraft and Skype&lt;/a&gt;. Judging by the ratio of "Likes" versus "Dislikes", there is a ready and eager audience for this form of alleged entertainment.&lt;/p&gt;

&lt;p&gt;Playing pranks is part of being a kid, and you can always expect a bit of horseplay where groups of children get together. Where the situation gets more than a little sinister is when adults engage in deliberately humiliating young kids and posting their efforts up on the internet.&lt;/p&gt;

&lt;h3 id="mr-man-being-a-dick"&gt;Mr Man Being a Dick&lt;/h3&gt;

&lt;p&gt;In this YouTube clip, the ironically titled "Mr Man" trolls an 11-year old by destroying his creation - a recreation of the US aircraft carrier 'USS Nimitz'.&lt;/p&gt;

&lt;div class="flex-video"&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/8p2BFHk6vuM" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The 11-year old is clearly quite proud of his work, and demonstrates considerable knowledge of his subject. Mr Man's angle for his trolling is that the kid's work is definitely worth inclusion in a "Top Ten" list of Minecraft videos Mr Man is putting together, feeding the boy's ego while at the same time surreptitiously planning to wreck the creation in an unrecoverable way.&lt;/p&gt;

&lt;p&gt;The most disturbing part of this - apart from a grown man causing emotional pain to young children - is that Mr Man will probably be generating income from the distress caused. I'm disinclined to suggest that you watch the video. The video is quite lengthy - it goes for about 30mins - but regardless, any viewing has the potential to line Mr Man's pockets with advertising revenue. Naturally, If you do watch this you have the option to "Dislike" the video - or even report it if you think the content is inappropriate. That is completely up to you.&lt;/p&gt;

&lt;h3 id="year-old-being-trolled"&gt;6-year old being trolled&lt;/h3&gt;

&lt;p&gt;In this clip an older player trolls a 6-year old, apparently as pay-back for the child throwing away the virtual possessions of the troller's cousin.&lt;/p&gt;

&lt;div class="flex-video"&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/LJmbHgHybKk" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The 6-year old can be heard getting hysterical as he is repeatedly tricked and abused by other players. In a follow up to this video the child is encouraged to throw his character off a high building by the troll.&lt;/p&gt;

&lt;p&gt;The 6-year old may have been acting out in the first case, but how we get to the point where anyone thinks this is a reasonable way to discipline a 6-year old is beyond me. And why no adult intervenes is also a mystery.&lt;/p&gt;

&lt;p&gt;I'm fully aware that this article is likely to garner negative feedback from some readers. But any suggestion that I don't have a sense of humour will be blithely ignored. There is &lt;em&gt;&lt;a href="http://en.wikipedia.org/wiki/Schadenfreude"&gt;schadenfreude&lt;/a&gt;&lt;/em&gt;, and there is picking on young children. And only one is truly funny.&lt;/p&gt;

&lt;h2 id="your-kids-are-trolling-too"&gt;Your kids are trolling too&lt;/h2&gt;

&lt;p&gt;In the videos above, other children are witnessing - and sometimes directly participating in - the online harassment of other children, made easy by the lack of personal consequence. While the videos represent the most public form of bullying, day-to-day playing with Minecraft can include more persistent and subtle bullying. At least in the playground there's potentially a teacher within earshot who can intervene if play gets out of hand. Online, there's often no such overview.&lt;/p&gt;

&lt;p&gt;In a way, kids are just learning about how to exist in a digital, semi-anonymous world. But an important lesson should be that your actions do have consequences - at least to the victims - and accepting trolling is normalising brutality.&lt;/p&gt;

&lt;p&gt;My own kids have their own private Minecraft server, intended to provide a safe play space for them and their friends. Regardless of controls they've put in place, we've still seen a reasonable amount of aberrant behaviour. Kids being kids, it's expected that they will push the limits - especially when they think no grownups are watching. Griefing from "friends of friends" who had been invited on to the server without my boys' knowledge was common, resulted in more restrictive levels of access for most players.&lt;/p&gt;

&lt;p&gt;In one incident a child resorted to threats "I won't be your friend anymore" and suggestions of self-harm lest he get his way - all undeniably forms of psychological bullying. A quick phone call to this parents resolved the situation, but also revealed that the parents had no idea what was going on only a few feet away.&lt;/p&gt;

&lt;h2 id="advice-to-parents"&gt;Advice to Parents&lt;/h2&gt;

&lt;p&gt;Nothing here is meant to denigrate the role of parents. It's quite a task to keep up with your children's online activities. Technology is changing quickly and your children are adapting much faster than you are.&lt;/p&gt;

&lt;p&gt;From my point of view though, I have a right and a responsibility to know what my kids are up to online. It's a little bit easier for me, coming from an IT background, but I think we all need to keep ourselves informed. In general I'd suggest that keeping the lines of communication open is by far the best approach.&lt;/p&gt;

&lt;h3 id="keep-an-eye-on-things"&gt;Keep an eye on things&lt;/h3&gt;

&lt;p&gt;Our boys spend a lot of time on the internet - possibly too much, but we are a bit of a geek family. We're not restrictive about the kids use of computers, but we do like to keep an ear out for trouble.&lt;/p&gt;

&lt;p&gt;If you hear online chats ramping up in intensity, it's probably a good time to ask what's going on. Over the weekend my oldest was being griefed by someone running an exploit, constantly killing my son's character and changing his spawn point so he couldn't re-engage with the game.&lt;/p&gt;

&lt;p&gt;His conversations with other players became more and more frantic. I wished we'd stepped in earlier, but we did intervene. I'd hate to think how he'd be feeling if we'd just left him to get more and more worked up over it.&lt;/p&gt;

&lt;p&gt;It may only be a game, but what happens in Minecraft can be as real to your kids as something happening in the real world. If your child seems sullen after a Minecraft session it might not be a bad idea to ask how things are going.&lt;/p&gt;

&lt;h3 id="talk-to-your-kids"&gt;Talk to your kids&lt;/h3&gt;

&lt;p&gt;Kids need to have strategies for dealing with bullies - whether in real-life or on the internet. Having something they have worked on for hours - or even weeks - destroyed by some idiot will have an effect on their happiness, and they won't learn how to be resilient from a wiki page.&lt;/p&gt;

&lt;p&gt;Ask what servers are your children are using on regular basis. Is there any kind of supervision on these servers? Do the administrators enforce any kind of rules to keep the servers fun and fair? Many servers will have policies against griefing, but it's good to who you or your kids can talk to if they are getting harassed.&lt;/p&gt;

&lt;p&gt;But most of all ask your kids how they deal with bullies online. They need advice on what to do when they are being victimised. Sometimes it's just as simple as suggesting they walk away from the game for a while, or trying a different server. But they need advice from someone they can trust, not advice from someone in an online forum.&lt;/p&gt;

&lt;p&gt;Kids also need to understand how to keep themselves safe online. They need to be able to protect their online identity. Minecraft itself offers a level of anonymity while playing, but using other services may expose information about your child's identity. When I hear about kids being griefed over Skype I wonder what else their attackers possibly know about them.&lt;/p&gt;

&lt;p&gt;You need to keep yourself safe as well. If your children are running servers on your home network there is an opportunity for someone to compromise your internet security. Are your kids running Minecraft servers from home? Have they installed plugins? Do they know where the plugins come from? How can they trust the source? These are important things to know.&lt;/p&gt;

&lt;h3 id="play-with-your-kids"&gt;Play with your kids&lt;/h3&gt;

&lt;p&gt;Before you say anything about "being too old to play with computers", put down your iPhone and have a look at what your kids are engaging with.&lt;/p&gt;

&lt;p&gt;Minecraft is the virtual equivalent of a getting out a big box of Lego. It's an incredible amount of fun and there's really no end of things that can be learned through it. Kids are learning about architecture, design, logic and maths. They are learning how to solve problems and work co-operatively with people all around the planet. The more technical kids are learning about managing servers, about operating systems and programming.&lt;/p&gt;

&lt;p&gt;There's so much good stuff in Minecraft, it almost seems trite to point out the negatives. It really is a lot of fun to play - and play is something we can easily forget about in our busy, self-serious adult lives.&lt;/p&gt;

&lt;p&gt;The worst thing you could possibly do is ban your kids from playing Minecraft. They are learning new skills that will help them on the journey into the kind of life and work that we can't even imagine.&lt;/p&gt;

&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;

&lt;p&gt;The original "Creeper looking through broken glass" image was sourced from &lt;a href="http://hdw.eweb4.com/out/945751.html"&gt;http://hdw.eweb4.com/out/945751.html&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
